# Generated code for {{ model.__name__ }} model

from enum import Enum
from typing import Annotated

from database import get_async_db
from fastapi import APIRouter, Depends, HTTPException, status
from database.models.user import User
from database.models.{{ module }} import {{ model.__name__ }}
from sqlmodel.ext.asyncio.session import AsyncSession

from .auth import get_authenticated_user
from .utils import queryutil
from .utils.crudutils import ActionResponse, make_crud_schemas
from .utils.queryutil import GetListParams, get_list_params


router = APIRouter()
TAGS: list[str | Enum] = ['{{ model.__name__ }}']


CreateSchema, UpdateSchema, ResponseSchema, ListResponseSchema = make_crud_schemas({{ model.__name__ }})
{{ model.__name__ }}Create = CreateSchema
{{ model.__name__ }}Update = UpdateSchema


@router.post('/{{ route_name }}', response_model=ResponseSchema, tags=TAGS)
async def create_{{ model.__name__.lower() }}(
    {%- if create_login_required %}{{ '\n\t' }}current_user: Annotated[User, get_authenticated_user('{{ route_name }}', 'create')], {%- endif %}
    db: Annotated[AsyncSession, Depends(get_async_db)],
    data: {{ model.__name__ }}Create,
):
    try:
        obj = {{ model.__name__ }}(**data.model_dump())
        result = await queryutil.create_one(db, obj)
        return result
    except HTTPException as ex:
        raise ex
    except Exception as ex:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=str(ex)
        ) from ex


@router.get('/{{ route_name }}', response_model=ListResponseSchema, tags=['{{ model.__name__ }}'])
async def get_{{ model.__name__.lower() }}s(
    {%- if create_login_required %}{{ '\n\t' }}current_user: Annotated[User, get_authenticated_user('{{ route_name }}', 'read')], {%- endif %}
    db: Annotated[AsyncSession, Depends(get_async_db)],
    params: Annotated[GetListParams, Depends(get_list_params)],
):
    try:
        total, results = await queryutil.get_list(db, {{ model.__name__ }}, params)
        data = [ResponseSchema(**r.model_dump()) for r in results]
        return ListResponseSchema(total=total, data=data)
    except HTTPException as ex:
        raise ex
    except Exception as ex:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=str(ex)
        ) from ex


@router.get('/{{  route_name }}/{id}', response_model=ResponseSchema, tags=['{{ model.__name__ }}'])
async def get_{{ model.__name__.lower() }}(
    {%- if create_login_required %}{{ '\n\t' }}current_user: Annotated[User, get_authenticated_user('{{ route_name }}', 'read')], {%- endif %}
    db: Annotated[AsyncSession, Depends(get_async_db)],
    id: int,
):
    try:
        result = await queryutil.get_one(db, {{ model.__name__ }}, id)
        return result
    except HTTPException as ex:
        raise ex
    except Exception as ex:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=str(ex)
        ) from ex


@router.patch('/{{  route_name }}/{id}', response_model=ResponseSchema, tags=['{{ model.__name__ }}'])
async def update_{{ model.__name__.lower() }}(
    {%- if create_login_required %}{{ '\n\t' }}current_user: Annotated[User, get_authenticated_user('{{ route_name }}', 'update')], {%- endif %}
    db: Annotated[AsyncSession, Depends(get_async_db)],
    id: int,
    data: {{ model.__name__ }}Update,
):
    try:
        result = await queryutil.update_one(db, {{ model.__name__ }}, id, data)
        return result
    except HTTPException as ex:
        raise ex
    except Exception as ex:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=str(ex)
        ) from ex


@router.delete('/{{  route_name }}/{id}', response_model=ActionResponse, tags=['{{ model.__name__ }}'])
async def delete_{{ model.__name__.lower() }}(
    {%- if create_login_required %}{{ '\n\t' }}current_user: Annotated[User, get_authenticated_user('{{ route_name }}', 'delete')], {%- endif %}
    db: Annotated[AsyncSession, Depends(get_async_db)],
    id: int,
):
    try:
        await queryutil.delete_one(db, {{ model.__name__ }}, id)
        return ActionResponse(
            success=True,
            message='Application Setting deleted successfully'
        )
    except HTTPException as ex:
        raise ex
    except Exception as ex:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=str(ex)
        ) from ex

