# Generated code for {{ model.__name__ }} model

from datetime import datetime
from enum import Enum
from typing import Annotated

from database import get_db
from fastapi import APIRouter, Depends, HTTPException, status
from models.user import User
from models.{{ module }} import {{ model.__name__ }}
from pydantic import BaseModel
from sqlmodel import Session

from .auth import get_current_user
from .utils import queryutil
from .utils.queryutil import GetListParams, get_list_params


router = APIRouter()
TAGS: list[str | Enum] = ['{{ model.__name__ }}']

class ActionResponse(BaseModel):
    success: bool
    message: str


class {{ model.__name__ }}Create(BaseModel):
    {%- for field in model.model_fields -%}
        {% if field != 'id' -%}
            {% set model_field = model.model_fields[field] -%}
            {% set annotation = model_field.annotation -%}
            {%- if 'class' in annotation|string -%}
                {{ field }}: {{ annotation.__name__ -}}
            {% else -%}
                {{ field }}: {{ annotation -}}
            {% endif -%}
            {%- if not model_field.is_required() -%}
                {%- if model_field.default is string -%}
                    {{ '' }} | None = '{{ model_field.get_default() }}'
                {%- else -%}
                    {{ '' }} | None = {{  model_field.get_default() }}
                {%- endif -%}
            {% endif -%}
        {%- endif %}
    {% endfor %}


class {{ model.__name__ }}Response(BaseModel):
    {% for field in model.model_fields -%}
        {% set model_field = model.model_fields[field] -%}
        {% set annotation = model_field.annotation -%}
        {%- if 'class' in annotation|string -%}
            {{ field }}: {{ annotation.__name__ -}}
        {% else -%}
            {{ field }}: {{ annotation -}}
        {% endif -%}
        {%- if not model_field.is_required() -%}
            {{ '' }} | None = None
        {%- endif %}
    {% endfor %}


class {{ model.__name__ }}Update(BaseModel):
    {%- for field in model.model_fields -%}
        {% if field != 'id' -%}
            {% set model_field = model.model_fields[field] -%}
            {% set annotation = model_field.annotation -%}
            {%- if 'class' in annotation|string -%}
                {{ field }}: {{ annotation.__name__ }} | None = None
            {%- else -%}
                {{ field }}: {{ annotation }} | None = None
            {%- endif %}
        {%- endif %}
    {% endfor %}


class {{ model.__name__ }}ListResponse(BaseModel):
    total: int
    data: list[{{ model.__name__ }}Response]


@router.post('/{{  route_name }}', response_model={{ model.__name__ }}Response, tags=TAGS)
async def create_{{ model.__name__.lower() }}(
    data: {{ model.__name__ }}Create,
    {%- if create_login_required %}{{ '\n\t' }}current_user: Annotated[User, Depends(get_current_user)], {%- endif %}
    db: Annotated[Session, Depends(get_db)],
):
    try:
        obj = {{ model.__name__ }}(**data.model_dump())
        result = queryutil.create_one(db, obj)
        return result
    except HTTPException as ex:
        raise ex
    except Exception as ex:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=str(ex)
        ) from ex


@router.get('/{{ route_name }}', response_model={{ model.__name__ }}ListResponse, tags=['{{ model.__name__ }}'])
async def get_{{ model.__name__.lower() }}s(
    {%- if read_login_required %}{{ '\n\t' }}current_user: Annotated[User, Depends(get_current_user)], {%- endif %}
    db: Annotated[Session, Depends(get_db)],
    params: Annotated[GetListParams, Depends(get_list_params)],
):
    try:
        total, results = queryutil.get_list(db, {{ model.__name__ }}, params)
        data = [{{ model.__name__ }}Response(**r.model_dump()) for r in results]
        return {{ model.__name__ }}ListResponse(total=total, data=data)
    except HTTPException as ex:
        raise ex
    except Exception as ex:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=str(ex)
        ) from ex


@router.get('/{{  route_name }}/{id}', response_model={{ model.__name__ }}Response, tags=['{{ model.__name__ }}'])
async def get_{{ model.__name__.lower() }}(
    {%- if read_login_required %}{{ '\n\t' }}current_user: Annotated[User, Depends(get_current_user)], {%- endif %}
    db: Annotated[Session, Depends(get_db)],
    id: int,
):
    try:
        result = queryutil.get_one(db, {{ model.__name__ }}, id)
        return result
    except HTTPException as ex:
        raise ex
    except Exception as ex:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=str(ex)
        ) from ex


@router.patch('/{{  route_name }}/{id}', response_model={{ model.__name__ }}Response, tags=['{{ model.__name__ }}'])
async def update_{{ model.__name__.lower() }}(
    {%- if update_login_required %}{{ '\n\t' }}current_user: Annotated[User, Depends(get_current_user)], {%- endif %}
    db: Annotated[Session, Depends(get_db)],
    id: int,
    data: {{ model.__name__ }}Update,
):
    try:
        obj = {{ model.__name__ }}(id=id, **data.model_dump())
        result = queryutil.update_one(db, obj)
        return result
    except HTTPException as ex:
        raise ex
    except Exception as ex:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=str(ex)
        ) from ex


@router.delete('/{{  route_name }}/{id}', response_model=ActionResponse, tags=['{{ model.__name__ }}'])
async def delete_{{ model.__name__.lower() }}(
    {%- if delete_login_required %}{{ '\n\t' }}current_user: Annotated[User, Depends(get_current_user)], {%- endif %}
    db: Annotated[Session, Depends(get_db)],
    id: int,
):
    try:
        queryutil.delete_one(db, {{ model.__name__ }}, id)
        return ActionResponse(
            success=True,
            message='Application Setting deleted successfully'
        )
    except HTTPException as ex:
        raise ex
    except Exception as ex:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=str(ex)
        ) from ex

